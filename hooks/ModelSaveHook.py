from utils.TrainingHooks.PeriodicTrainingHook import PeriodicTrainingHook
import os 
import torch
from utils.ensure_dir import ensure_dir
import shutil

class ModelSaveHook(PeriodicTrainingHook):
    def __init__(self,model,model_name,save_dir,period,shift):
        self.model = model
        self.model_name = model_name
        ensure_dir(save_dir)
        self.save_dir = save_dir
        super(ModelSaveHook,self).__init__(period,shift)

    def call(self,*args,**kwargs):
        pth = self._create_current_path(self.model_name)
        self.notify('Saving %s to %s...'%(self.model_name,pth))
        torch.save(self.model.state_dict(),pth)
        self.notify('Done.')
                        
    def _create_current_path(self,name):
        return os.path.join(self.save_dir,'{}{}.pt'.format(name,str(self.step).zfill(7)))
    
    def setup(self,*args):
        super(PeriodicTrainingHook,self).setup()
        if len(args):
            module_dir = os.path.join(self.save_dir,'module_code')
            ensure_dir(module_dir)
            with open(os.path.join(module_dir,'__init__.py'),'w') as f:
                f.write('#This file (and the rest of module_code) was generated by an instance of the class {}, defined in {}.\n'.format(self.__class__.__name__,__file__))
            for source_path in args:
                shutil.copy(source_path,os.path.join(module_dir,os.path.basename(source_path)))
        return self

                
                
                
                
                
                
                
                
                
                
                
                
                